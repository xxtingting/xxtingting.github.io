(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{370:function(t,a,s){"use strict";s.r(a);var e=s(44),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"事件委托和事件冒泡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件委托和事件冒泡"}},[t._v("#")]),t._v(" 事件委托和事件冒泡")]),t._v(" "),s("h4",{attrs:{id:"事件委托-其实也是使用了冒泡的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件委托-其实也是使用了冒泡的原理"}},[t._v("#")]),t._v(" 事件委托（其实也是使用了冒泡的原理）")]),t._v(" "),s("p",[t._v("一个父盒子里面有多个按钮，现在我们要给父盒子中的每一个按钮绑定一个事件，\n如果通过遍历去绑定，太消耗性能了，利用事件委托我们直接给父元素绑定即可完成")]),t._v(" "),s("p",[t._v("优点：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("提升性能")]),t._v("：每一个函数都会占用内存空间。每一个事件都会与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多；如果使用事件委托，只需添加一个事件处理程序代理所有事件,所占用的内存空间更少。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("动态监听")]),t._v("：使用事件委托可以自动绑定动态添加的元素,即新增的节点不需要主动添加也可以一样具有和其他元素一样的事件。")])])]),t._v(" "),s("h4",{attrs:{id:"事件冒泡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件冒泡"}},[t._v("#")]),t._v(" 事件冒泡")]),t._v(" "),s("p",[t._v("就是点击最里面的元素，会触发父元素的方法")])])}),[],!1,null,null,null);a.default=r.exports}}]);